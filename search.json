[{"title":"Tiny Tiny RSS 在桌面端和移动端的优化方案","date":"2020-12-03T16:00:00.000Z","url":"/myblog/2020/12/04/%E4%BD%BF%E7%94%A8%20RSS%20Tracker%20%E5%88%9B%E5%BB%BA%20RSS%20%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/","tags":[["Tiny Tiny RSS","/myblog/tags/Tiny-Tiny-RSS/"],["RSS Tracker","/myblog/tags/RSS-Tracker/"],["Unread","/myblog/tags/Unread/"]],"categories":[["实用性-阐述规则","/myblog/categories/%E5%AE%9E%E7%94%A8%E6%80%A7-%E9%98%90%E8%BF%B0%E8%A7%84%E5%88%99/"]],"content":"RSS Tracker 优化桌面端阅读体验下载 RSS Tracker下载地址： RSS Tracker 提供试用版本，为期七天。 配置 Fever在部署好的 Tiny Tiny RSS 中开启 Fever API，先在插件目录下打开 Fever 插件 保存后可以在下方的 Fever Emulation 中设置 Fever API 的密码 启用 Fever API 与相关配置选择 Fever 的登录选项 在登录界面中输入 Fever API 的地址，比如我的是 。账号名称为 admin ，密码为刚才在 Tiny Tiny RSS 中配置的密码 登录结果如下图所示，点击【Confirmed &amp; Next】进入下一项配置 设置软件的基础配置，点击【Confirmed &amp; Next】即可完成全部的配置 结果展示如下： Unread 优化移动端阅读体验下载 Unread可以支持 Fever API 的有 Feeder 和 Unread，由于第一款软件无法在国服 APP store 下载到，因此选择 Unread 作为移动端阅读软件。 启动 Fever API软件打开后如下图所示，其中的 Fever 是已经配置完成的结果。点击其中的【ADD AN ACCONT】 呼出菜单中选择【FEVER】 填入 TTRSS 的网址，然后点击【NEXT】后填入上面创建的账号和密码 配置完成后结果如下： 总结根据目前的使用体验来看，RSS Tracker 有如下优缺点 优点： 优化阅读体验，更好的信息流展示方式和阅读方式 提供翻译服务 提供朗读服务 提供更方便的全文抓取服务 更好的视觉效果 缺点： 部分文章全文抓取速度相比 mercury 要慢 列表视图在笔记本上的体验稍差，无法自定义列表和原文的显示大小 订阅新源需要回到 Tiny Tiny RSS 没有【已收藏】的图标 由于体验时间很短因此难免有疏漏，有些问题可能源于对软件理解不足，有些则会随着软件更新得到解决。整体而言，RSS Tracker 提供了相当完整的 RSS 阅读服务，很大程度优化了桌面客户端的阅读体验。 参考资料： 软件使用说明 | 云乡 (richasy.cn)； 【UWP】有趣的RSS阅读器，RSS追踪全新版本上线_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili； Tiny Tiny RSS + fever 搭建自己的 RSS 服务_前端博客 - SegmentFault 思否； "},{"title":"手动搭建LNMP","date":"2020-11-28T16:00:00.000Z","url":"/myblog/2020/11/29/%E6%90%AD%E5%BB%BALNMP/","tags":[["CentOS","/myblog/tags/CentOS/"],["Nginx","/myblog/tags/Nginx/"],["MariaDB","/myblog/tags/MariaDB/"],["PHP","/myblog/tags/PHP/"]],"categories":[["实用性-阐述规则","/myblog/categories/%E5%AE%9E%E7%94%A8%E6%80%A7-%E9%98%90%E8%BF%B0%E8%A7%84%E5%88%99/"]],"content":"安装 Nginx 执行以下命令，在 /etc/yum.repos.d/ 下创建 nginx.repo 文件。 按 i 切换至编辑模式，写入以下内容。 按 Esc，输入 :wq，保存文件并返回。 执行以下命令，安装 nginx。 执行以下命令，打开 nginx.conf 文件。 按 i 切换至编辑模式，编辑 nginx.conf 文件。 找到 server&#123;...&#125;，并将 server 大括号中相应的配置信息替换为如下内容。用于取消对 IPv6 地址的监听，同时配置 Nginx，实现与 PHP 的联动。 说明：可使用 Ctrl+F 向下翻页、Ctrl+B向上翻页查看文件。 若 nginx.conf 文件中未找到 server&#123;...&#125; ，请在 include /etc/nginx/conf.d/*conf; 上方添加以上的 server&#123;...&#125; 配置内容。如下图所示： 按 Esc，输入 :wq，保存文件并返回。 执行以下命令启动 Nginx。 执行以下命令，设置 Nginx 为开机自启动。 在本地浏览器中访问以下地址，查看 Nginx 服务是否正常运行。 显示如下，则说明 Nginx 安装配置成功。 安装数据库 执行以下命令，查看系统中是否已安装 MariaDB。 返回结果类似如下内容，则表示已存在 MariaDB。 为避免安装版本不同造成冲突，请执行以下命令移除已安装的 MariaDB。 若返回结果为空，则说明未预先安装，则执行下一步。 执行以下命令，在 /etc/yum.repos.d/ 下创建 MariaDB.repo 文件。 按 i 切换至编辑模式，写入以下内容，添加 MariaDB 软件库。 说明：不同操作系统的 MariaDB 软件库不同，可前往 MariaDB 官网 获取其他版本操作系统的 MariaDB 软件库安装信息。 这里使用了国内的镜像，下载速度快得多 按 Esc，输入 :wq，保存文件并返回。 执行以下命令，安装 MariaDB。 执行以下命令，启动 MariaDB 服务。 执行以下命令，设置 MariaDB 为开机自启动。 执行以下命令，验证 MariaDB 是否安装成功。 显示结果如下，则成功安装。 执行以下命令，退出 MariaDB。 安装配置PHP 依次执行以下命令，更新 yum 中 PHP 的软件源。 执行以下命令，安装 PHP 7.2 所需要的包。 执行以下命令，启动 PHP-FPM 服务。 执行以下命令，设置 PHP-FPM 服务为开机自启动。 验证环境配置当您完成环境配置后，可以通过以下验证 LNMP 环境是否搭建成功。 执行以下命令，创建测试文件。 执行以下命令，重启 Nginx 服务。 在本地浏览器中访问如下地址，查看环境配置是否成功。 参考资料： 云服务器 手动搭建 LNMP 环境（CentOS 7） - 最佳实践 - 文档中心 - 腾讯云 (tencent.com)； CentOS7 安装 MariaDB 国内镜像-CSDN博客； "},{"title":"用 WordPress 搭建动态博客","date":"2020-11-27T16:00:00.000Z","url":"/myblog/2020/11/28/%E6%90%AD%E5%BB%BAWordPress%E5%8A%A8%E6%80%81%E5%8D%9A%E5%AE%A2/","tags":[["WordPress","/myblog/tags/WordPress/"],["腾讯云","/myblog/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"]],"categories":[["实用性-阐述规则","/myblog/categories/%E5%AE%9E%E7%94%A8%E6%80%A7-%E9%98%90%E8%BF%B0%E8%A7%84%E5%88%99/"]],"content":"云服务器自动搭建以腾讯云服务器为例： 点击【重置应用】 点击【应用镜像】，选择【WordPress】，勾选上确定声明后点击【确定】 点击【应用管理】 点击【登录】 打开 credentials.txt ，并记住其中的密码 登录管理员登录地址，然后输入刚才的账户名和密码 现在可以登录 WordPress 配置和撰写博客了 手动搭建搭建LNMP环境搭建过程参考 搭建LNMP 配置数据库 执行以下命令，进入 MariaDB。 执行以下命令，创建 MariaDB 数据库。例如 “wordpress”。 执行以下命令，创建一个新用户。例如 “user”，登录密码为 123456。 执行以下命令，赋予用户对 “wordpress” 数据库的全部权限。 执行以下命令，设置 root 帐户密码。 说明：MariaDB 10.4 在 CentOS 系统上已增加了 root 帐户免密登录功能，请执行以下步骤设置您的 root 帐户密码并牢记。 执行以下命令，使所有配置生效。 执行以下命令，退出 MariaDB。 安装和配置WordPress下载 WordPress 说明：WordPress 可从 WordPress 官方网站下载 WordPress 最新中文版本并安装，本教程采用 WordPress 中文版本。 执行以下命令，删除网站根目录下用于测试 PHP-Nginx 配置的 index.php 文件。 依次执行以下命令，进入 /usr/share/nginx/html/ 目录，并下载与解压 WordPress。 修改 WordPress 配置文件 依次执行以下命令，进入 WordPress 安装目录，将 wp-config-sample.php 文件复制到 wp-config.php 文件中，并将原先的示例配置文件保留作为备份。 执行以下命令，打开并编辑新创建的配置文件。 按 i 切换至编辑模式，找到文件中 MySQL 的部分，并将相关配置信息修改为 配置 WordPress 数据库 中的内容。 修改完成后，按 Esc，输入 :wq，保存文件返回。 验证WordPress安装 在浏览器地址栏输入 http://域名或云服务器实例的公网 IP/wordpress 文件夹，例如： 转至 WordPress 安装页，开始配置 WordPress。 根据 WordPress 安装向导提示输入以下安装信息，单击【安装 WordPress】，完成安装。 所需信息 说明 站点标题 WordPress 网站名称。 用户名 WordPress 管理员名称。出于安全考虑，建议设置一个不同于 admin 的名称。因为与默认用户名称 admin 相比，该名称更难破解。 密码 可以使用默认强密码或者自定义密码。请勿重复使用现有密码，并确保将密码保存在安全的位置。 您的电子邮件 用于接收通知的电子邮件地址。 现在可以用登录 WordPress 博客，并开始发布博客文章了。 用 docker 搭建搭建 LNMP 环境搭建方式同上 安装 docker 和 docker-compose安装 Docker 一键安装 Docker 实测该命令在CentOS 8上无法使用，需要手动安装 启动 Docker 服务 检查一下 Docker 是否启动成功 安装 docker-compose使用 GitHub 的方式安装 从github上下载docker-compose二进制文件安装 下载最新版的docker-compose文件 添加可执行权限 测试安装结果 使用 pip 安装 安装 pip 安装 docker-compose 配置 .yml 文件文件配置代码如下所示： 安装WordPress新建一个文件夹，将配置好的 docker-compose.yml 文件复制进文件夹，在该文件夹下输入 等待安装完成即可，安装完成后可以查看容器运行状态 容器运行情况如下 然后可以在相应端口打开 WordPress 开始配置和撰写博客 参考资料： 个人博客|网站部署终极操作:一行命令搞定!_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili； 云服务器 手动搭建 WordPress 个人站点（Linux） - 最佳实践 - 文档中心 - 腾讯云 (tencent.com)； 轻量应用服务器 使用应用镜像搭建 WordPress 站点 - 最佳实践 - 文档中心 - 腾讯云 (tencent.com)； "},{"title":"用 Hexo 搭建个人静态博客","date":"2020-11-27T16:00:00.000Z","url":"/myblog/2020/11/28/%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/","tags":[["Hexo","/myblog/tags/Hexo/"],["Github Pages","/myblog/tags/Github-Pages/"]],"categories":[["实用性-阐述规则","/myblog/categories/%E5%AE%9E%E7%94%A8%E6%80%A7-%E9%98%90%E8%BF%B0%E8%A7%84%E5%88%99/"]],"content":"安装 Hexo安装 Hexo 的前提是： Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)； Git； 关于 Node.js 和 Git 的安装过程可以参考 安装-Node-js； 安装-Git； 使用 npm 安装 Hexo ： 创建 GitHub 仓库点击 GitHub 主页右上角的【新建仓库】 设置好仓库名称、描述后即可点击【生成仓库】 在仓库设置中将 GitHub Pages 的目录由 None 设置为 main ，然后点击左侧的保存，上方就会生成 GitHub Pages 网址 建站初始化网站按照下列代码可以初始化文件夹 如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 新建文章 默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。 如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。 如果标题包含空格的话，请使用引号括起来。如： 命令说明： 参数 描述 -p, --path 自定义新文章的路径 -r, --replace 如果存在同名文章，将其替换 -s, --slug 文章的 Slug，作为新文章的文件名和发布后的 URL 可以使用 --path 参数来自行决定文章文件的目录位置 以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 &quot;About me&quot;。 ==注意！title 是必须指定的！==，当然也可以自己配置 Font-Matter ，配置方式参考 Front-matter | Hexo 中文文档 。 生成静态文件静态文件的生成代码如下： 命令说明： 选项 描述 -d, --deploy 文件生成后立即部署网站 -w, --watch 监视文件变动 -b, --bail 生成过程中如果发生任何未处理的异常则抛出异常 -f, --force 强制重新生成文件 Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。 使用该参数的效果接近 hexo clean &amp;&amp; hexo generate -c, --concurrency 最大同时生成文件的数量，默认无限制 发表草稿发表草稿的代码如下： 启动服务器启动服务器的代码如下： 默认的访问网址为： 命令说明： 选项 描述 -p, --port 重设端口 -s, --static 只使用静态文件 -l, --log 启动日记记录，使用覆盖记录格式 一键部署网站部署方式如下： 在开始之前，您必须先在 _config.yml 中修改参数，一个正确的部署配置中至少要有 type 参数，例如： 您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。 其他有关渲染、清楚缓存文件、列出网站资料、显示版本等命令参考：指令 | Hexo； 部署到 GitHub 的详细步骤说明： 安装 hexo-deployer-git。 修改配置。 部署到 GitHub 时，分支（branch）建议使用 main ，因为这是仓库的默认目录。否则需要将 GitHub 仓库的默认目录更改为配置设置的对应目录。 不填写时 Hexo 会自动在仓库中创建一个目录。 命令说明： 参数 描述 默认 repo 库（Repository）地址 branch 分支名称 gh-pages (GitHub) coding-pages (Coding.net) master (others) message 自定义提交信息 Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;) token Optional token value to authenticate with the repo. Prefix with $ to read token from environment variable 生成站点文件并推送至远程库。执行 登入 Github，在库设置（Repository Settings）中将默认分支设置为 _config.yml 配置中的分支名称。稍等片刻站点就会显示在 Github Pages 中。 这一切是如何发生的？ 当执行 hexo deploy 时，Hexo 会将 public 目录中的文件和目录推送至 _config.yml 中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。 文件说明： _config.yml：网站的 配置 信息，您可以在此配置大部分的参数。 pakage.json：应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。 scaffolds：模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 source：资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes：主题 文件夹。Hexo 会根据主题来生成静态页面。 配置说明主要的配置都可以在 _config.yml 中修改 网站 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 keywords 网站的关键词。支援多个关键词。 author 您的名字 language 网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。 timezone 网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。 其中，description 主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author 参数用于主题显示文章的作者。 网址 参数 描述 默认值 url 网址, must starts with http:// or https:// root 网站根目录 permalink 文章的 永久链接 格式 :year/:month/:day/:title/ permalink_defaults 永久链接中各部分的默认值 pretty_urls 改写 permalink 的值来美化 URL pretty_urls.trailing_index 是否在永久链接中保留尾部的 index.html，设置为 false 时去除 true pretty_urls.trailing_html 是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效) true 如果您的网站存放在子目录中，例如 ，则请将您的 url 设为  并把 root 设为 /blog/。 目录 参数 描述 默认值 source_dir 资源文件夹，这个文件夹用来存放内容。 source public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir Include code 文件夹，source_dir 下的子目录 downloads/code i18n_dir 国际化（i18n）文件夹 :lang skip_render 跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可使用 glob 表达式来匹配路径。 如果刚开始使用 Hexo 通常不用修改这一项 文章 参数 描述 默认值 new_post_name 新文章的文件名称 :title.md default_layout 预设布局 post auto_spacing 在中文和英文之间加入空格 false titlecase 把标题转换为 title case false external_link 在新标签中打开链接 true external_link.enable 在新标签中打开链接 true external_link.field 对整个网站（site）生效或仅对文章（post）生效 site external_link.exclude 需要排除的域名。主域名和子域名如 www 需分别配置 [] filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0 render_drafts 显示草稿 false post_asset_folder 启动 Asset 文件夹 false relative_link 把链接改为与根目录的相对位址 false future 显示未来的文章 true highlight 代码块的设置, see Highlight.js section for usage guide prismjs 代码块的设置, see PrismJS section for usage guide 相对地址： 默认情况下，Hexo 生成的超链接都是绝对地址。例如，如果您的网站域名为 example.com,您有一篇文章名为 hello，那么绝对链接可能像这样：，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。 分类/标签 参数 描述 默认值 default_category 默认分类 uncategorized category_map 分类别名 tag_map 标签别名 日期/时间格式Hexo 使用 Moment.js 来解析和显示时间。 参数 描述 默认值 date_format 日期格式 YYYY-MM-DD time_format 时间格式 HH:mm:ss updated_option 当 Front Matter 中没有指定 updated 时 updated 的取值 mtime update_option updated_option 控制了当 Front Matter 中没有指定 updated 时，updated 如何取值： mtime: 使用文件的最后修改时间。这是从 Hexo 3.0.0 开始的默认行为。 date: 使用 date 作为 updated 的值。可被用于 Git 工作流之中，因为使用 Git 管理站点时，文件的最后修改日期常常会发生改变 empty: 直接删除 updated。使用这一选项可能会导致大部分主题和插件无法正常工作。 use_date_for_updated 选项已经被废弃，将会在下个重大版本发布时去除。请改为使用 updated_option: &#39;date&#39;。 分页 参数 描述 默认值 per_page 每页显示的文章量 (0 = 关闭分页功能) 10 pagination_dir 分页目录 page 扩展 参数 描述 theme 当前主题名称。值为false时禁用主题 theme_config 主题的配置文件。在这里放置的配置会覆盖主题目录下的 _config.yml 中的配置 deploy 部署部分的设置 meta_generator Meta generator 标签。 值为 false 时 Hexo 不会在头部插入该标签 更多扩展配置与配置相关信息参考 配置 | Hexo ； 迁移关于 RSS 的迁移方法，首先安装 hexo-migrator-rss 插件，安装代码为： 安装完成后从 RSS 迁移文章，迁移代码如下： source 可以是文件路径或网址。 主题创建 Hexo 主题非常容易，只要在 themes 文件夹内，新增一个任意名称的文件夹，并修改 _config.yml 内的 theme 设定，即可切换主题。一个主题可能会有以下的结构： 文件说明： _config.yml：主题的配置文件。和 Hexo 配置文件不同，主题配置文件修改时会自动更新，无需重启 Hexo Server。 languages：语言文件夹。请参见 国际化 (i18n)。 layout： 布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式，Hexo 内建 Swig 模板引擎，您可以另外安装插件来获得 EJS、Haml、Jade 或 Pug 支持，Hexo 根据模板文件的扩展名来决定所使用的模板引擎，例如： 可参考 模板 以获得更多信息。 scripts：脚本文件夹。在启动时，Hexo 会载入此文件夹内的 JavaScript 文件，请参见 插件 以获得更多信息。 source： 资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为 _（下划线线）或隐藏的文件会被忽略。 如果文件可以被渲染的话，会经过解析然后储存到 public 文件夹，否则会直接拷贝到 public 文件夹。 推荐几个好看的主题： NexT主题； yun主题； cards主题； 问题解决 为什么部署到 GitHub pages 后无法访问？ 检查是否在 GitHub Pages 中将目录分支改为自己部署的分支； 检查是否将部署目录设置为默认目录——如果创建的目录不是默认目录 main ，需要重新将默认目录设置为 Hexo 部署的目录 为什么部署后没有样式？ 在 _config.yml 文件中将 url 和 root 修改为对应的位置，如下代码所示 然后重新生成和部署（ hexo g -d ），稍等片刻即刻显示样式。 说明：其中，. 表示搜索和 _config.yml 同一级的文件，当然也可以手动写为对应目录名 为什么重新部署后 GitHub Pages 的内容没有变化？ 国内网络原因，稍等一会就好。 参考资料 文档 | Hexo； 手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili； Hexo 静态博客搭建笔记 | 云游君的小站 (yunyoujun.cn)； 教你如何从零开始搭建一个属于自己的网站 | 云游君的小站 (yunyoujun.cn)； Github Page + Hexo 免费搭建个人博客教程 | ChrAlpha’s Blog (ichr.me)； 使用指南 | Hexo-Theme-Yun (yunyoujun.cn)； 开始使用 | Theme Cards (ichr.me)； hexo部署到gitee没有样式——完美解决 | guitar&amp;programmer的博客-CSDN博客； "},{"title":"用阿里云部署 Tiny Tiny RSS","date":"2020-11-11T16:00:00.000Z","url":"/myblog/2020/11/12/TT-RSS%EF%BC%9A%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/","tags":[["Tiny Tiny RSS","/myblog/tags/Tiny-Tiny-RSS/"],["阿里云","/myblog/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"],["CentOS","/myblog/tags/CentOS/"]],"categories":[["实用性-阐述规则","/myblog/categories/%E5%AE%9E%E7%94%A8%E6%80%A7-%E9%98%90%E8%BF%B0%E8%A7%84%E5%88%99/"]],"content":"准备资料 云服务器：阿里云服务器【本次使用】；vultr服务器 SSH：xft6 控制台：Xshell 完成备案的域名 部署云服务器利用阿里云部署服务器以部署轻量应用服务器为例，部署步骤如下： 购买云服务器——入口：阿里云轻量应用服务器购买页面 选择服务器类型 配置云服务器部署位置、性能、时间等 选择部署位置 选择服务器系统镜像——以 CentOS7.3 为例 选择服务器性能套餐和系统盘容量 选择购买时长和数量 点击购买后自动开始部署 部署完成——部署完成的服务器可在服务器列表中找到 外部控制台与SSH 链接链接到 Xshell 新建连接 设置名称和主机IP 在用户身份验证中设置用户名和密码 连接到云服务器 接受主机密钥 连接成功结果 连接到 xft6 新建连接 设置名称、主机IP、用户名与密码后确认 连接到云服务器 连接成功结构 配置云服务环境安装 yum安装和更新代码： 安装 Docker 一键安装 Docker 实测该命令在CentOS 8上无法使用，需要手动安装 启动 Docker 服务 检查一下 Docker 是否启动成功 Docker服务状态 参考资料：Get Docker Engine - Community for CentOS | Docker Documentation 安装 Docker-compose由于 Tiny Tiny RSS 依赖有 PostgreSQL 的数据库服务以及 mercury_fulltext 的全文抓取服务等等，这些服务我们都借助于 Docker 部署，因此利用 Docker-compose 就会大大降低我们的部署难度。 安装 Docker-compose 给予 Docker-compose 可执行权限 检查 Docker-compose 是否安装成功 安装成功结果 安装 Tiny Tiny RSS 及其周边服务安装 Tiny Tiny RSS与配置 下载由 Awesome-TTRSS 配置的 Tiny Tiny RSS 服务的 docker-compose 配置文件 修改 docker-compose.yml 里面的内容 进入文本编辑模式 使用 vi 进入文本编辑模式 vi docker-compose.yml 点击 i 进入文字输入模式 修改文档 TT-RSS的默认端口是181 保存退出 点击 Esc 进入命令模式 使用 :wq 保存文件并退出 将 PostgreSQL 数据库的默认密码进行修改 将 Tiny Tiny RSS 服务的部署网址修改——注意，如果你的部署 URL 包含端口（比如默认部署端口为 181 端口），那么这里的 URL 也需要加上端口号，格式为 &#123;网址&#125;:&#123;端口&#125; 启动 Tiny Tiny RSS 服务 docker-compose up -d 查看脚本执行结果 docker ps Tiny Tiny RSS 本身，监听端口为 0.0.0.0:181 -&gt; 80，同时暴露给外网 PostgreSQL 数据库，仅供内部使用 Mercury 全文抓取服务，仅供内部使用 OpenCC 简体、繁体中文转换服务，仅供内部使用 发现问题则执行以下代码修改 安装 Nginx 作为 Docker 容器的反向代理 使用 yum 安装 Nginx sudo yum install nginx 开启 Nginx 服务 sudo systemctl start nginx 检查 Nginx 是否启动成功 sudo systemctl status nginx 如果事先安装了 Apache ，先用 sudo systemctl stop httpd.service 关闭 Apache 服务 签署 SSL 证书，部署 HTTPS 安装 certbot 运行 certbot 来签署 SSL 证书并自动配置 Nginx 服务 在这里，certbot 会要求我们输入我们希望签署 SSL 证书的域名，我们选择为 Tiny Tiny RSS 分配的域名即可等待脚本执行完成后重启 Nginx 服务 修改 Nginx 的配置文件，配置 Nginx 反向代理，将访问  的请求指向我们刚刚部署好的 Tiny Tiny RSS 服务 Nginx 的配置文件位于 /etc/nginx/nginx.conf 在 http 项下，server 项前定义 upstream 服务 在刚刚 certbot 为我们生成好的响应域名 server 项下，注释掉第一行定义 root 的内容 并将 location / 项修改为以下内容 再次执行 sudo systemctl restart nginx 重启 Nginx 服务，就可以在网站访问Tiny Tiny RSS 了 部署结果 登录Tiny Tiny RSS 的默认管理员账户密码 Tiny Tiny RSS 的默认管理员账户密码 账号：admin 密码：password 部署结果 这种配置下的 Tiny Tiny RSS 包含了主题和各种常用插件，可以直接才偏好设置中选择开启而不需要额外配置。 参考资料： Tiny Tiny RSS | 最速部署私有 RSS 服务器； 如何搭建属于自己的 RSS 服务，高效精准获取信息； How to Install Tiny Tiny RSS on CentOS 7； 一站式容器化解决方案：Awesome TTRSS； 部署中的普遍问题与注意事项； Cerbot：Certbot | Nginx on CentOS/RHEL 7； "},{"title":"用 Hugo 搭建个人静态博客","date":"2020-08-02T16:00:00.000Z","url":"/myblog/2020/08/03/%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","tags":[["Hugo","/myblog/tags/Hugo/"],["GitHub","/myblog/tags/GitHub/"]],"categories":[["实用性-阐述规则","/myblog/categories/%E5%AE%9E%E7%94%A8%E6%80%A7-%E9%98%90%E8%BF%B0%E8%A7%84%E5%88%99/"]],"content":"目录说明 layout目录和themes目录都可以控制皮肤，区别在于：hugo会首先查找layout中是否有皮肤文件，因此不需要指令；对于theme中的文件需要额外的指令，相对更加方便导出传递 static目录存放：images, CSS, JavaScript，etc 生成站点将站点生成到所需路径下 将路径设置到需要添加blog的位置 使用hugo new site命令生成blog 设置blog文件夹的名称 在public目录下生成网站的方式 它会将你的网站设置和内容生成到public目录下，为后面的部署做准备 设置主题clone 主题到 themes 目录 在 主题列表 中，找到自己喜欢的主题，将主题添加到themes目录下 在 clone 的时候要将主题文件 clone 到 themes 目录下。也可以自己复制到对应目录。 这里的命令在主题的网页中有，可以直接复制。 对于一些提供 example site 的主题，可以将文件中的 example site 目录下的文件复制并覆盖掉源blog下的文件 layout目录 layout 目录可以承载以 .html 为格式的模板 模板类型包括：single page、partials、list pages、homepage、taxonomy templates 运行hugo执行hugo命令进行调试 调试完成后可以在本地的 local host 上打开 动态监测hugo 在运行网站后，能够动态的调整网站内容，只需要将修改的文件保存后，效果就会在网站上动态显示出来 关闭动态监测的方式： 这个方法同样可以通过在 config.toml 或 config.yml 中加入以下任意语句达成 本地编写文章在 post 目录下生成 markdown 文件 如果只需要创建在 content 下，可以直接生成而不必指明路径 部署在GitHub上 在GitHub上创建一个仓库，并设置好命名和描述——比如将仓库命名为 blog 在仓库设置中打开 GitHub Pages 设置，并复制生成的 GitHub Pages 网址 在站点根目录执行 hugo 命令，生成最终页面 完成后，所有的静态页面都会生成public目录 将public目录下所有文件push到刚建立的repository的master分支下 然后在对应的 GitHub Pages 可以打开我们的个人博客 参考资料： 哔哩哔哩：手把手教你从0开始搭建自己的个人博客； 利用基于Go Lang的Hugo配合nginx来打造属于自己的纯静态博客系统 (v3u.cn)； Hugo Theme Introduction | Hugo Themes (gohugo.io)； Hugo中文文档 (gohugo.org)； "},{"date":"2020-12-06T09:30:12.292Z","url":"/myblog/categories/index.html","categories":[[" ",""]]},{"date":"2020-12-06T09:31:43.055Z","url":"/myblog/search/index.html","categories":[[" ",""]]},{"date":"2020-12-06T09:29:11.141Z","url":"/myblog/tags/index.html","categories":[[" ",""]]}]