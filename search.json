[{"title":"Hello World","date":"2020-12-01T12:39:43.975Z","url":"/myblog/2020/12/01/hello-world/","categories":[[" ",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"},{"title":"用Hexo搭建静态博客","date":"2020-11-28T12:23:20.000Z","url":"/myblog/2020/11/28/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","tags":[["Hexo","/myblog/tags/Hexo/"],["Github Pages","/myblog/tags/Github-Pages/"]],"categories":[["实用性-阐述规则","/myblog/categories/%E5%AE%9E%E7%94%A8%E6%80%A7-%E9%98%90%E8%BF%B0%E8%A7%84%E5%88%99/"]],"content":"安装 Hexo安装 Hexo 的前提是： Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)； Git； 关于 Node.js 和 Git 的安装过程可以参考 安装-Node-js； 安装-Git； 使用 npm 安装 Hexo ： 建站在指定位置生成所需的文件夹 安装完成后的目录文件如 图2-1 所示 图2-1 文件夹目录 文件说明： _config.yml：网站的 配置 信息，您可以在此配置大部分的参数。 pakage.json：应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。 scaffolds：模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 source：资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes：主题 文件夹。Hexo 会根据主题来生成静态页面。 配置主要的配置都可以在 _config.yml 中修改 网站 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 keywords 网站的关键词。支援多个关键词。 author 您的名字 language 网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。 timezone 网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。 其中，description 主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author 参数用于主题显示文章的作者。 网址 参数 描述 默认值 url 网址, must starts with http:// or https:// root 网站根目录 permalink 文章的 永久链接 格式 :year/:month/:day/:title/ permalink_defaults 永久链接中各部分的默认值 pretty_urls 改写 permalink 的值来美化 URL pretty_urls.trailing_index 是否在永久链接中保留尾部的 index.html，设置为 false 时去除 true pretty_urls.trailing_html 是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效) true 如果您的网站存放在子目录中，例如 ，则请将您的 url 设为  并把 root 设为 /blog/。 目录 参数 描述 默认值 source_dir 资源文件夹，这个文件夹用来存放内容。 source public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir Include code 文件夹，source_dir 下的子目录 downloads/code i18n_dir 国际化（i18n）文件夹 :lang skip_render 跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可使用 glob 表达式来匹配路径。 如果刚开始使用 Hexo 通常不用修改这一项 文章 参数 描述 默认值 new_post_name 新文章的文件名称 :title.md default_layout 预设布局 post auto_spacing 在中文和英文之间加入空格 false titlecase 把标题转换为 title case false external_link 在新标签中打开链接 true external_link.enable 在新标签中打开链接 true external_link.field 对整个网站（site）生效或仅对文章（post）生效 site external_link.exclude 需要排除的域名。主域名和子域名如 www 需分别配置 [] filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0 render_drafts 显示草稿 false post_asset_folder 启动 Asset 文件夹 false relative_link 把链接改为与根目录的相对位址 false future 显示未来的文章 true highlight 代码块的设置, see Highlight.js section for usage guide prismjs 代码块的设置, see PrismJS section for usage guide 相对地址： 默认情况下，Hexo 生成的超链接都是绝对地址。例如，如果您的网站域名为 example.com,您有一篇文章名为 hello，那么绝对链接可能像这样：，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。 分类/标签 参数 描述 默认值 default_category 默认分类 uncategorized category_map 分类别名 tag_map 标签别名 日期/时间格式Hexo 使用 Moment.js 来解析和显示时间。 参数 描述 默认值 date_format 日期格式 YYYY-MM-DD time_format 时间格式 HH:mm:ss updated_option 当 Front Matter 中没有指定 updated 时 updated 的取值 mtime update_option updated_option 控制了当 Front Matter 中没有指定 updated 时，updated 如何取值： mtime: 使用文件的最后修改时间。这是从 Hexo 3.0.0 开始的默认行为。 date: 使用 date 作为 updated 的值。可被用于 Git 工作流之中，因为使用 Git 管理站点时，文件的最后修改日期常常会发生改变 empty: 直接删除 updated。使用这一选项可能会导致大部分主题和插件无法正常工作。 use_date_for_updated 选项已经被废弃，将会在下个重大版本发布时去除。请改为使用 updated_option: &#39;date&#39;。 分页 参数 描述 默认值 per_page 每页显示的文章量 (0 = 关闭分页功能) 10 pagination_dir 分页目录 page 扩展 参数 描述 theme 当前主题名称。值为false时禁用主题 theme_config 主题的配置文件。在这里放置的配置会覆盖主题目录下的 _config.yml 中的配置 deploy 部署部分的设置 meta_generator Meta generator 标签。 值为 false 时 Hexo 不会在头部插入该标签 更多扩展配置与配置相关信息参考 配置 | Hexo ； 命令初始化网站按照下列代码可以初始化文件夹 如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 新建文章 默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。 如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。 如果标题包含空格的话，请使用引号括起来。如： 参数 描述 -p, --path 自定义新文章的路径 -r, --replace 如果存在同名文章，将其替换 -s, --slug 文章的 Slug，作为新文章的文件名和发布后的 URL 可以使用 --path 参数来自行决定文章文件的目录位置 以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 &quot;About me&quot;。 ==注意！title 是必须指定的！== 生成静态文件静态文件的生成代码如下，第二行为简写的方式： 选项 描述 -d, --deploy 文件生成后立即部署网站 -w, --watch 监视文件变动 -b, --bail 生成过程中如果发生任何未处理的异常则抛出异常 -f, --force 强制重新生成文件 Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。 使用该参数的效果接近 hexo clean &amp;&amp; hexo generate -c, --concurrency 最大同时生成文件的数量，默认无限制 发表草稿发表草稿的代码如下： 启动服务器启动服务器的代码如下： 默认的访问网址为： 选项 描述 -p, --port 重设端口 -s, --static 只使用静态文件 -l, --log 启动日记记录，使用覆盖记录格式 一键部署网站部署方式如下，其中第二行为简写： 在开始之前，您必须先在 _config.yml 中修改参数，一个正确的部署配置中至少要有 type 参数，例如： 您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。 其他有关渲染、清楚缓存文件、列出网站资料、显示版本等命令参考：指令 | Hexo； 部署到GitHub上 安装 hexo-deployer-git。 修改配置。 参数 描述 默认 repo 库（Repository）地址 branch 分支名称 gh-pages (GitHub) coding-pages (Coding.net) master (others) message 自定义提交信息 Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;) token Optional token value to authenticate with the repo. Prefix with $ to read token from environment variable 生成站点文件并推送至远程库。执行 登入 Github/BitBucket/Gitlab，请在库设置（Repository Settings）中将默认分支设置为_config.yml配置中的分支名称。稍等片刻，您的站点就会显示在您的Github Pages中。 这一切是如何发生的？ 当执行 hexo deploy 时，Hexo 会将 public 目录中的文件和目录推送至 _config.yml 中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。 迁移关于 RSS 的迁移方法，首先安装 hexo-migrator-rss 插件，安装代码为： 安装完成后从 RSS 迁移文章，迁移代码如下： source 可以是文件路径或网址。 主题创建 Hexo 主题非常容易，您只要在 themes 文件夹内，新增一个任意名称的文件夹，并修改 _config.yml 内的 theme 设定，即可切换主题。一个主题可能会有以下的结构： _config.yml：主题的配置文件。和 Hexo 配置文件不同，主题配置文件修改时会自动更新，无需重启 Hexo Server。 languages：语言文件夹。请参见 国际化 (i18n)。 layout： 布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式，Hexo 内建 Swig 模板引擎，您可以另外安装插件来获得 EJS、Haml、Jade 或 Pug 支持，Hexo 根据模板文件的扩展名来决定所使用的模板引擎，例如： 您可参考 模板 以获得更多信息。 scripts：脚本文件夹。在启动时，Hexo 会载入此文件夹内的 JavaScript 文件，请参见 插件 以获得更多信息。 source： 资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为 _（下划线线）或隐藏的文件会被忽略。 如果文件可以被渲染的话，会经过解析然后储存到 public 文件夹，否则会直接拷贝到 public 文件夹。 发布： 当您完成主题后，可以考虑将它发布到 主题列表，让更多人能够使用您的主题。在发布前建议先进行 主题单元测试，确保每一项功能都能正常使用。发布主题的步骤和 更新文档 非常类似。 Fork hexojs/site 把库（repository）复制到电脑上，并安装所依赖的插件。 编辑 source/_data/themes.yml，在文件中新增您的主题，例如： 在 source/themes/screenshots 新增同名的截图档案，图片必须为 800x500 的 PNG 文件。 推送（push）分支。 建立一个新的合并申请（pull request）并描述改动。 好看的主题： NexT主题； yun主题； cards主题； 问题解决 为什么部署到 GitHub pages 后无法访问？ 需要在创立好的仓库设置中，将 Branch 设置为 master （或自定义的目录），保存后即可访问对应的 GitHub pages 如图所示 为什么部署后没有样式？ 在 _config.yml 文件中将 url 和 root 修改为对应的位置，如下代码所示 其中，. 表示搜索和 _config.yml 同一级的文件 然后重新生成和部署（ hexo g -d ），就可以在网站上看到自己的样式了 为什么点击文章或菜单栏找不到相应的样式？ 如何部署到自己的域名上？ 参考资料 文档 | Hexo； 手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili； Hexo 静态博客搭建笔记 | 云游君的小站 (yunyoujun.cn)； 教你如何从零开始搭建一个属于自己的网站 | 云游君的小站 (yunyoujun.cn)； 使用指南 | Hexo-Theme-Yun (yunyoujun.cn)； Github Page + Hexo 免费搭建个人博客教程 | ChrAlpha’s Blog (ichr.me)； 开始使用 | Theme Cards (ichr.me)； hexo部署到gitee没有样式——完美解决_guitar&amp;programmer的博客-CSDN博客_hexo部署到gitee无法正常显示； "},{"title":"用阿里云部署 Tiny Tiny RSS","date":"2020-11-11T16:00:00.000Z","url":"/myblog/2020/11/12/TT-RSS%EF%BC%9A%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/","tags":[["Tiny Tiny RSS","/myblog/tags/Tiny-Tiny-RSS/"],["阿里云服务器","/myblog/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"],["docker","/myblog/tags/docker/"],["docker-compose","/myblog/tags/docker-compose/"]],"categories":[["实用性-阐述规则","/myblog/categories/%E5%AE%9E%E7%94%A8%E6%80%A7-%E9%98%90%E8%BF%B0%E8%A7%84%E5%88%99/"]],"content":"准备资料 云服务器：阿里云服务器【本次使用】；vultr服务器 SSH：xft6 控制台：Xshell 完成备案的域名——域名注册与备案参考文章：域名注册与备案流程 部署云服务器利用阿里云部署服务器 购买云服务器——以购买轻量应用服务器为例，进入阿里云轻量应用服务器购买页面 选择服务器类型 配置云服务器部署位置、性能、时间等 选择部署位置 选择服务器系统镜像——以 CentOS7.3 为例 选择服务器性能套餐和系统盘容量 选择购买时长和数量 点击购买后自动开始部署 部署完成——部署完成的服务器可在服务器列表中找到 利用vultr部署服务器 进入部署云服务器入口 选择服务器种类 选择服务器位置、性能等 选择服务器部署位置 选择服务器操作系统——本次使用的是 CentOS7 系统 双击系统名称可以选择系统版本 选择服务器方案 额外功能 点击部署并等待部署完成 部署成功结果 使用外部控制台和 SSH 链接链接到 Xshell 新建连接 设置名称和主机IP 在用户身份验证中设置用户名和密码 连接到云服务器 接受主机密钥 连接成功结果 连接到 xft6 新建连接 设置名称、主机IP、用户名与密码后确认 连接到云服务器 连接成功结构 配置环境安装 yum安装和更新代码： 安装 Docker 一键安装 Docker 实测该命令在CentOS 8上无法使用，需要手动安装 启动 Docker 服务 检查一下 Docker 是否启动成功 Docker服务状态 参考资料：Get Docker Engine - Community for CentOS | Docker Documentation 安装 Docker-compose由于 Tiny Tiny RSS 依赖有 PostgreSQL 的数据库服务以及 mercury_fulltext 的全文抓取服务等等，这些服务我们都借助于 Docker 部署，因此利用 Docker-compose 就会大大降低我们的部署难度。 安装 Docker-compose 给予 Docker-compose 可执行权限 检查 Docker-compose 是否安装成功 安装成功结果 安装 Tiny Tiny RSS 及其周边服务安装 Tiny Tiny RSS与配置 下载由 Awesome-TTRSS 配置的 Tiny Tiny RSS 服务的 docker-compose 配置文件 修改 docker-compose.yml 里面的内容 进入文本编辑模式 使用 vi 进入文本编辑模式 vi docker-compose.yml 点击 i 进入文字输入模式 修改文档 TT-RSS的默认端口是181 保存退出 点击 Esc 进入命令模式 使用 :wq 保存文件并退出 将 PostgreSQL 数据库的默认密码进行修改 将 Tiny Tiny RSS 服务的部署网址修改——注意，如果你的部署 URL 包含端口（比如默认部署端口为 181 端口），那么这里的 URL 也需要加上端口号，格式为 &#123;网址&#125;:&#123;端口&#125; 启动 Tiny Tiny RSS 服务 docker-compose up -d 查看脚本执行结果 docker ps Tiny Tiny RSS 本身，监听端口为 0.0.0.0:181 -&gt; 80，同时暴露给外网 PostgreSQL 数据库，仅供内部使用 Mercury 全文抓取服务，仅供内部使用 OpenCC 简体、繁体中文转换服务，仅供内部使用 发现问题则执行以下代码修改 安装 Nginx 作为 Docker 容器的反向代理 使用 yum 安装 Nginx sudo yum install nginx 开启 Nginx 服务 sudo systemctl start nginx 检查 Nginx 是否启动成功 sudo systemctl status nginx 如果事先安装了 Apache ，先用 sudo systemctl stop httpd.service 关闭 Apache 服务 签署SSL证书，部署HTTPS 安装 certbot 运行 certbot 来签署 SSL 证书并自动配置 Nginx 服务 在这里，certbot 会要求我们输入我们希望签署 SSL 证书的域名，我们选择为 Tiny Tiny RSS 分配的域名即可 等待脚本执行完成后重启 Nginx 服务 修改 Nginx 的配置文件，配置 Nginx 反向代理，将访问  的请求指向我们刚刚部署好的 Tiny Tiny RSS 服务 Nginx 的配置文件位于 /etc/nginx/nginx.conf 在 http 项下，server 项前定义 upstream 服务 在刚刚 certbot 为我们生成好的响应域名 server 项下，注释掉第一行定义 root 的内容 并将 location / 项修改为以下内容 再次执行 sudo systemctl restart nginx 重启 Nginx 服务，之后可以在网站上访问TTRSS服务器了 部署结果 登录Tiny Tiny RSS 的默认管理员账户密码 Tiny Tiny RSS 的默认管理员账户密码 账号：admin 密码：password 部署结果 参考资料 核心文档 Tiny Tiny RSS | 最速部署私有 RSS 服务器 如何搭建属于自己的 RSS 服务，高效精准获取信息 How to Install Tiny Tiny RSS on CentOS 7 一站式容器化解决方案：Awesome TTRSS 部署中的普遍问题与注意事项 解决单个问题文档 Cerbot：Certbot | Nginx on CentOS/RHEL 7 "}]